package by.epam.javatraining.beseda.webproject.dao.util.wrapperconnector;

import by.epam.javatraining.beseda.webproject.dao.util.connectionpool.DBConnector;
import org.apache.log4j.Logger;

import static by.epam.javatraining.beseda.webproject.dao.util.database.SQLQuery.SEMICOLON;
import static by.epam.javatraining.beseda.webproject.dao.util.dataloader.DatabaseProperties.DATABASE_PASSWORD;
import static by.epam.javatraining.beseda.webproject.dao.util.dataloader.DatabaseProperties.DATABASE_URL;
import static by.epam.javatraining.beseda.webproject.dao.util.dataloader.DatabaseProperties.DATABASE_USER;
import static by.epam.javatraining.beseda.webproject.util.LoggerName.ERROR_LOGGER;
import static by.epam.javatraining.beseda.webproject.util.resourceloader.GeneralProperties.WAIT_FOR_DB_RESPONSE;

import java.sql.*;

/**
 * Class supposed to conceal connection object
 *
 * @author Beseda
 */
public class WrapperConnector {

    private static Logger log = Logger.getLogger(ERROR_LOGGER);

    private Connection connection;
    private static DBConnector pool;

    public WrapperConnector() {
        pool = DBConnector.createConnectionPool(DATABASE_URL, DATABASE_USER, DATABASE_PASSWORD);
        try {
            connection = pool.getConnection();
        } catch (SQLException e) {
            log.error("Error creating a connection to database: " + e);
        }
    }

    public Statement createStatement() throws SQLException {
        validateConnection();
        return connection.createStatement();
    }


    public PreparedStatement prepareStatement(String statement) throws SQLException {
        validateConnection();
        return connection.prepareStatement(statement + SEMICOLON);
    }

    public PreparedStatement prepareStatementWithAutoGeneratedKeys(String statement) throws SQLException {
        validateConnection();
        return connection.prepareStatement(statement + SEMICOLON, Statement.RETURN_GENERATED_KEYS);
    }

    public Array createArray(int[] intArr) {
        Array array = null;
        Object[] obArr = new Object[intArr.length];
        for (int i = 0; i < intArr.length; i++) {
            obArr[i] = intArr[i];
        }
        try {
            array = connection.createArrayOf("INTEGER", obArr);
        } catch (SQLException e) {
            log.error("Impossible to create array of objects");
        }
        return array;
    }

    public void closeStatement(Statement st) {
        if (st != null) {
            try {
                st.close();
            } catch (SQLException e) {
                log.error("Error closing statement: " + e);
            }
        }
    }

    public void closeConnector() {
        if (connection != null) {
            pool.releaseConnection(connection);
        }
    }

    private void validateConnection() throws SQLException {
        if (connection == null
                || (!connection.isValid(WAIT_FOR_DB_RESPONSE))) {
            connection = pool.getConnection();
        }
    }
}
