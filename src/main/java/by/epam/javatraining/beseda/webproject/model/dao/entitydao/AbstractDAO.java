package by.epam.javatraining.beseda.webproject.model.dao.entitydao;

import by.epam.javatraining.beseda.webproject.util.wrapperconnector.WrapperConnector;
import by.epam.javatraining.beseda.webproject.model.entity.BaseEntity;
import by.epam.javatraining.beseda.webproject.model.exception.DAOexception.DAOLayerException;
import by.epam.javatraining.beseda.webproject.model.exception.DAOexception.DAOTechnicalException;
import org.apache.log4j.Logger;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

public abstract class AbstractDAO<E extends BaseEntity> implements EntityDAO<E> {

    protected volatile WrapperConnector connector;
    protected String dbTableName;

    private Logger log = Logger.getLogger(AbstractDAO.class.getSimpleName());

    protected AbstractDAO() {
        this.connector = new WrapperConnector();
    }

    public abstract List<E> getAll() throws DAOLayerException;

    public abstract E findEntityById(int id) throws DAOTechnicalException;

    public void delete(int id) {
        PreparedStatement st = null;
        try {
            st = connector.prepareStatement(setDeleteStetement());
            st.setInt(1, id);
        } catch (SQLException e) {
            log.error("SQL exception. Error retrieving data from database: " + e);
        } finally {
            closeStatement(st);
        }
    }

    /**
     * Returns string representation of SQL query
     */
    protected abstract String setDeleteStetement();

    public void delete(E entity) {
        delete(entity.getId());
    }

    public int add(E user) throws DAOLayerException {
        PreparedStatement st = null;
        int id = -1;
        try {
            st = connector.prepareStatementWithAutoGeneratedKeys(setAddStetement());
            setDataOnPreparedStatement(st, user);
            st.executeUpdate();
            ResultSet rs = st.getGeneratedKeys();
            rs.first();
            id = rs.getInt(1);
        } catch (SQLException e) {
            throw new DAOTechnicalException("Error updating database", e);
        } finally {
            closeStatement(st);
        }
        return id;
    }

    /**
     * Sets data on prepared statement object
     *
     * @param st prepared statement
     * @param entity source of data
     * @throws SQLException
     */
    protected abstract void setDataOnPreparedStatement(PreparedStatement st, E entity) throws SQLException;

    /**
     * Returns string representation of SQL query
     */
    protected abstract String setAddStetement();

    public abstract void update(E entity) throws DAOLayerException;

    /**
     * Method for getting the WrapperConnector object
     *
     * @return WrapperConnector object
     */
    public WrapperConnector getWrapperConnector() {
        return connector;
    }

    /**
     * Closes the specified statement
     *
     * @param statement statement to close
     */
    protected void closeStatement(Statement statement) {
        connector.closeStatement(statement);
    }

    public void closeConnection() {
        connector.closeConnection();
    }

}
