package by.epam.javatraining.beseda.webproject.dao.util.wrapperconnector;

import static by.epam.javatraining.beseda.webproject.dao.util.SQLQuery.SEMICOLON;
import static by.epam.javatraining.beseda.webproject.util.GeneralProperties.WAIT_FOR_DB_RESPONSE;
import static by.epam.javatraining.beseda.webproject.util.LoggerName.ERROR_LOGGER;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.log4j.Logger;

import by.epam.javatraining.beseda.webproject.connectionpool.ConnectionPool;

/**
 * Class supposed to conceal connection object
 *
 * @author Beseda
 */
public class TestWrapperConnector implements ConnectionWrap {

	private static Logger log = Logger.getLogger(ERROR_LOGGER);

	private static ConnectionPool pool;
	private Connection connection;

	public TestWrapperConnector(ConnectionPool cpool) {
		if (pool == null) {
			pool = cpool;
		}
		try {
			connection = pool.getConnection();
		} catch (SQLException e) {
			log.error("Error creating a connection to database: " + e);
		}
	}

	@Override
	public Statement createStatement() throws SQLException {
		validateConnection();
		return connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	}

	@Override
	public PreparedStatement prepareStatement(String statement) throws SQLException {
		validateConnection();
		return connection.prepareStatement(statement + SEMICOLON, ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY);
	}

	@Override
	public PreparedStatement prepareStatementWithAutoGeneratedKeys(String statement) throws SQLException {
		validateConnection();
		return connection.prepareStatement(statement + SEMICOLON, Statement.RETURN_GENERATED_KEYS);
	}

	@Override
	public void closeStatement(Statement st) {
		if (st != null) {
			try {
				st.close();
			} catch (SQLException e) {
				log.error("Error closing statement: " + e);
			}
		}
	}

	@Override
	public void closeConnector() {
		if (connection != null) {
			pool.releaseConnection(connection);
		}
	}

	private void validateConnection() throws SQLException {
		if (connection == null || (!connection.isValid(WAIT_FOR_DB_RESPONSE))) {
			connection = pool.getConnection();
		}
	}
}
