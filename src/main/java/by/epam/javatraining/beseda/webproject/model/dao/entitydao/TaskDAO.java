package by.epam.javatraining.beseda.webproject.model.dao.entitydao;

import by.epam.javatraining.beseda.webproject.model.entity.route.Task;
import by.epam.javatraining.beseda.webproject.model.exception.DAOexception.DAOLayerException;
import by.epam.javatraining.beseda.webproject.model.exception.DAOexception.DAOTechnicalException;
import by.epam.javatraining.beseda.webproject.util.database.SQLQuery;
import org.apache.log4j.Logger;

import java.sql.*;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;

import static by.epam.javatraining.beseda.webproject.util.database.DBEntityTableName.*;
import static by.epam.javatraining.beseda.webproject.util.database.SQLQuery.*;

public class TaskDAO extends AbstractDAO<Task> {

    private Logger log = Logger.getLogger(TaskDAO.class.getSimpleName());
    private static TaskDAO instance = null;

    private TaskDAO() {
        super();
        this.dbTableName = T_TASKS;
    }

    public static TaskDAO getDAO() {
        if (instance == null) {
            instance = new TaskDAO();
        }
        return instance;
    }

    @Override
    public List<Task> getAll() throws DAOLayerException {
        List<Task> list = new ArrayList<>();
        Statement st = null;
        try {
            st = connector.createStatement();
            ResultSet result = st.executeQuery(SELECT_ALL_TASKS + END_OF_STATEMENT);
            while (result.next()) {
                Task task = createTask(result);
                list.add(task);
            }
        } catch (SQLException e) {
            throw new DAOTechnicalException("Error retrieving data from database", e);
        } finally {
            closeStatement(st);
        }
        return list;
    }

    private Task createTask(ResultSet result) throws SQLException, DAOTechnicalException {
        Task task = new Task();

        GregorianCalendar time = new GregorianCalendar();
        time.setTimeInMillis(result.getTime(TIME).getTime());

        task.setTime(time);
        task.setId(result.getInt(SQLQuery.TASK_ID));
        task.setDetail(result.getString(DETAIL));
        return task;
    }

    @Override
    public Task findEntityById(int id) throws DAOTechnicalException {
        PreparedStatement st = null;
        Task task = null;
        try {
            st = connector.prepareStatement(SELECT_TASK_BY_ID);
            st.setInt(1, id);
            ResultSet res = st.executeQuery();
            task = createTask(res);
        } catch (SQLException e) {
            throw new DAOTechnicalException("Error retrieving data from database", e);
        } finally {
            closeStatement(st);
        }
        return task;
    }

    @Override
    protected String setDeleteStetement(){
        return DELETE_TASK_BY_ID;
    }

    @Override
    protected String setAddStetement() {
        return INSERT_TASK;
    }

    @Override
    public void update(Task task) throws DAOLayerException {
        PreparedStatement st = null;
        try {
            st = connector.prepareStatementWithAutoGeneratedKeys(UPDATE_TASK);
            setDataOnPreparedStatement(st, task);
            st.setInt(3,task.getId());
            st.executeUpdate();
        } catch (SQLException e) {
            throw new DAOTechnicalException("Error updating database", e);
        } finally {
            closeStatement(st);
        }
    }

    @Override
    protected void setDataOnPreparedStatement(PreparedStatement st, Task task) throws SQLException {
        st.setTime(1, new Time(task.getTime().getTimeInMillis()));
        st.setString(2, task.getDetail());
    }
}
