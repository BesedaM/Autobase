package by.epam.javatraining.beseda.webproject.model.dao.entitydao;

import by.epam.javatraining.beseda.webproject.model.entity.car.Bus;
import by.epam.javatraining.beseda.webproject.model.entity.car.Car;
import by.epam.javatraining.beseda.webproject.model.entity.car.Truck;
import by.epam.javatraining.beseda.webproject.model.exception.DAOexception.CarTypeNotPresentException;
import by.epam.javatraining.beseda.webproject.model.exception.DAOexception.DAOLayerException;
import by.epam.javatraining.beseda.webproject.model.exception.DAOexception.DAOTechnicalException;
import by.epam.javatraining.beseda.webproject.util.database.DBEntityTableName;
import by.epam.javatraining.beseda.webproject.util.resourceloader.DatabaseEnumLoader;
import org.apache.log4j.Logger;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import static by.epam.javatraining.beseda.webproject.util.database.DBEntityTableName.*;
import static by.epam.javatraining.beseda.webproject.util.database.DBEnumTable.*;
import static by.epam.javatraining.beseda.webproject.util.database.SQLQuery.*;
import static by.epam.javatraining.beseda.webproject.util.database.SQLQuery.CAR_ID;

public class CarDAO extends AbstractDAO<Car> {

    private Logger log = Logger.getLogger(CarDAO.class.getSimpleName());
    private static CarDAO instance = null;

    private CarDAO() {
        super();
        this.dbTableName = DBEntityTableName.T_CARS;
    }

    public static CarDAO getDAO() {
        if (instance == null) {
            instance = new CarDAO();
        }
        return instance;
    }

    @Override
    public List<Car> getAll() throws DAOLayerException {
        List<Car> list = new ArrayList<>();
        Statement st = null;
        try {
            st = connector.createStatement();
            ResultSet result = st.executeQuery(SELECT_ALL_CARS + END_OF_STATEMENT);
            while (result.next()) {
                try {
                    Car car = createCar(result);
                    list.add(car);
                } catch (CarTypeNotPresentException e) {
                    log.error(e);
                }
            }
        } catch (SQLException e) {
            throw new DAOTechnicalException("Error retrieving data from database", e);
        } finally {
            closeStatement(st);
        }
        return list;
    }

    private Car createCar(ResultSet result) throws CarTypeNotPresentException, SQLException {
        String carType = result.getString(CAR_TYPE);
        Car car;
        if (carType == BUS) {
            car = new Bus();
            ((Bus) car).setSeats(result.getInt(SEATS_NUMBER));
        } else if (carType == TRUCK) {
            car = new Truck();
            ((Truck) car).setCapacity(result.getInt(TRUCK_CAPACITY));
        } else {
            throw new CarTypeNotPresentException();
        }
        car.setId(result.getInt(CAR_ID));
        car.setModel(result.getString(MODEL));
        car.setNumber(result.getString(CAR_NUMBER));
        car.setState(result.getString(CAR_STATE));
        car.setStatus(result.getString(CAR_STATUS));
        return car;
    }

    @Override
    public Car findEntityById(int id) throws DAOTechnicalException {
        PreparedStatement st = null;
        Car car = null;
        try {
            st = connector.prepareStatement(SELECT_CAR_BY_ID);
            st.setInt(1, id);
            ResultSet res = st.executeQuery();
            res.first();
            try {
                car = createCar(res);
            } catch (CarTypeNotPresentException e) {
                log.error(e);
            }
        } catch (SQLException e) {
            throw new DAOTechnicalException("Error retrieving data from database", e);
        } finally {
            closeStatement(st);
        }
        return car;
    }

    @Override
    public int add(Car car) throws DAOLayerException {
        PreparedStatement st = null;
        int id = -1;
        try {
            if (car instanceof Truck) {
                addTruck(st, (Truck) car);
            } else if (car instanceof Bus) {
                addBus(st, (Bus) car);
            } else {
                throw new CarTypeNotPresentException();
            }
            st.executeUpdate();
            ResultSet res = st.getGeneratedKeys();
            id = res.getInt(1);
        } catch (SQLException e) {
            throw new DAOTechnicalException("Error updating database", e);
        } finally {
            closeStatement(st);
        }
        return id;
    }

    private void addBus(PreparedStatement st, Bus car) throws SQLException {
        st = connector.prepareStatementWithAutoGeneratedKeys(ADD_NEW_BUS);
        int carTypeIndex = DatabaseEnumLoader.CAR_TYPE_MAP.getKey(BUS);
        st.setInt(1, carTypeIndex);
        setDataOnPreparedStatement(st, car);
    }

    private void addTruck(PreparedStatement st, Truck car) throws SQLException {
        st = connector.prepareStatementWithAutoGeneratedKeys(ADD_NEW_TRUCK);
        int carTypeIndex = DatabaseEnumLoader.CAR_TYPE_MAP.getKey(TRUCK);
        st.setInt(1, carTypeIndex);
        setDataOnPreparedStatement(st, car);
    }

    @Override
    protected void setDeleteLogic(PreparedStatement st) throws SQLException {
        st=connector.prepareStatement(DELETE_CAR_BY_ID);
    }

    @Override
    public void update(Car car) throws DAOLayerException {
        PreparedStatement st = null;
        try {
            if (car instanceof Truck) {
                updateTruck(st, (Truck) car);
            } else if (car instanceof Bus) {
                updateBus(st, (Bus) car);
            } else {
                throw new CarTypeNotPresentException();
            }
            st.setInt(7, car.getId());
            st.executeUpdate();
        } catch (SQLException e) {
            throw new DAOTechnicalException("Error updating database", e);
        } finally {
            closeStatement(st);
        }
    }

    private void updateTruck(PreparedStatement st, Truck car) throws SQLException {
        st = connector.prepareStatement(UPDATE_TRUCK);
        String truckCapacity = car.getCapacity() + "";
        int truckCapacityIndex = DatabaseEnumLoader.TRUCK_CAPACITY_MAP.getKey(truckCapacity);
        st.setInt(2, truckCapacityIndex);
        setDataOnPreparedStatement(st, car);
    }

    private void updateBus(PreparedStatement st, Bus car) throws SQLException {
        st = connector.prepareStatement(UPDATE_BUS);
        st.setInt(2, car.getSeats());
        setDataOnPreparedStatement(st, car);
    }


    private void setDataOnPreparedStatement(PreparedStatement st, Car car) throws SQLException {
        int carStateIndex = DatabaseEnumLoader.CAR_STATE_MAP.getKey(car.getState());
        int carStatusIndex = DatabaseEnumLoader.CAR_STATUS_MAP.getKey(car.getStatus());
        st.setString(3, car.getNumber());
        st.setString(4, car.getModel());
        st.setInt(5, carStatusIndex);
        st.setInt(6, carStateIndex);
    }

}
