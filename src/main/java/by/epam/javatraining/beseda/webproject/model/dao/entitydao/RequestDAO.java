package by.epam.javatraining.beseda.webproject.model.dao.entitydao;

import by.epam.javatraining.beseda.webproject.model.entity.Request;
import by.epam.javatraining.beseda.webproject.model.exception.DAOexception.DAOLayerException;
import by.epam.javatraining.beseda.webproject.model.exception.DAOexception.DAOTechnicalException;
import by.epam.javatraining.beseda.webproject.util.resourceloader.DatabaseEnumLoader;
import org.apache.log4j.Logger;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import static by.epam.javatraining.beseda.webproject.util.database.DBEntityTableName.*;
import static by.epam.javatraining.beseda.webproject.util.database.DBEnumTable.REQUEST_STATUS;
import static by.epam.javatraining.beseda.webproject.util.database.SQLQuery.*;

public class RequestDAO extends AbstractDAO<Request>{

    private Logger log = Logger.getLogger(TaskDAO.class.getSimpleName());
    private static RequestDAO instance = null;

    private RequestDAO() {
        super();
        this.dbTableName = T_REQUESTS;
    }

    public static RequestDAO getDAO() {
        if (instance == null) {
            instance = new RequestDAO();
        }
        return instance;
    }


    @Override
    public List<Request> getAll() throws DAOLayerException {
        List<Request> list = new ArrayList<>();
        Statement st = null;
        try {
            st = connector.createStatement();
            ResultSet result = st.executeQuery(SELECT_ALL_REQUESTS + END_OF_STATEMENT);
            while (result.next()) {
                Request request = createRequest(result);
                list.add(request);
            }
        } catch (SQLException e) {
            throw new DAOTechnicalException("Error retrieving data from database", e);
        } finally {
            closeStatement(st);
        }
        return list;
    }

    @Override
    public Request findEntityById(int id) throws DAOTechnicalException {
        PreparedStatement st = null;
        Request request;
        try {
            st = connector.prepareStatement(SELECT_REQUEST_BY_ID);
            st.setInt(1, id);
            ResultSet res = st.executeQuery();
            request = createRequest(res);
        } catch (SQLException e) {
            throw new DAOTechnicalException("Error retrieving data from database", e);
        } finally {
            closeStatement(st);
        }
        return request;
    }

    private Request createRequest(ResultSet res) throws SQLException{
        Request request=new Request();
        request.setId(res.getInt(REQUEST_ID));
        request.setStatus(res.getString(REQUEST_STATUS));
        request.setComment(res.getString(COMMENT));
        return request;
    }

    @Override
    protected String setDeleteStetement(){
        return DELETE_REQUEST_BY_ID;
    }

    @Override
    protected String setAddStetement() {
        return ADD_NEW_REQUEST;
    }

    @Override
    public void update(Request request) throws DAOLayerException {
        PreparedStatement st = null;
        try {
            st = connector.prepareStatementWithAutoGeneratedKeys(UPDATE_REQUEST);
            setDataOnPreparedStatement(st, request);
            st.setInt(3, request.getId());
            st.executeUpdate();
        } catch (SQLException e) {
            throw new DAOTechnicalException("Error updating database", e);
        } finally {
            closeStatement(st);
        }
    }

    @Override
    protected void setDataOnPreparedStatement(PreparedStatement st, Request request) throws SQLException {
        int statusId=DatabaseEnumLoader.REQUEST_STATUS_MAP.getKey(request.getStatus());
        st.setInt(1, statusId);
        st.setString(2, request.getComment());
    }
}
